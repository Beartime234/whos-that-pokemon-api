service: whos-that-pokemon
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: '>=1.28.0 <2.0.0'

custom:
  GalleryTableName: PokemonGalleryTable
  SessionTableName: WhosThatPokemonSessionTable-${opt:stage}
  customDomain:
    domainName: whosthatpokemon.xyz
    basePath: api
    stage: ${self:provider.stage}
    createRoute53Record: true
    certificateArn: arn:aws:acm:us-east-1:934679804324:certificate/e9d4580c-1ff4-4836-9a7e-9a9e532be2e6
    endpointType: regional

provider:
  name: aws
  runtime: go1.x
  stage: ${opt:stage}
  region: us-east-1
  endpointType: REGIONAL

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:DescribeTable"
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - table/${self:custom.GalleryTableName}/index/*
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - table/${self:custom.GalleryTableName}
    - Effect: "Allow"
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
        - "dynamodb:DescribeTable"
      Resource:
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - table/${self:custom.SessionTableName}/index/*
        - 'Fn::Join':
            - ':'
            - - 'arn:aws:dynamodb'
              - Ref: 'AWS::Region'
              - Ref: 'AWS::AccountId'
              - table/${self:custom.SessionTableName}
  environment:
    GALLERY_TABLE_NAME: ${self:custom.GalleryTableName}
    SESSION_TABLE_NAME: ${self:custom.SessionTableName}


# you can define service wide environment variables here
#  environment:
#    variable1: value1

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  start:
    handler: bin/start
    timeout: 10
    memorySize: 1024
    description: Whos that Pokemon API. Start function.
    events:
      - http:
          path: wtp/start
          method: post
  check:
    handler: bin/check
    timeout: 10
    memorySize: 1024
    description: Whos that Pokemon API. Check function.
    events:
      - http:
          path: wtp/check
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/api'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /api

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    SessionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: "SessionID"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "SessionID"
            KeyType: "HASH"
        BillingMode: "PAY_PER_REQUEST"
        TableName: ${self:custom.SessionTableName}
        TimeToLiveSpecification:
          AttributeName: ExpirationTime
          Enabled: True
  Outputs:
    ApiId:
     Description: "RestAPIId"
     Value:
       Ref: ApiGatewayRestApi
     Export:
        Name: ${opt:stage}-${self:service}-api-id